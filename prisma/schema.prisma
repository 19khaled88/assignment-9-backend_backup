// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// url      = env("DATABASE_URL_LOCAL")
// url = env("DATABASE_URL")
// url = env("SCALA_DATABASE_URL_PUBLIC")

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SCALA_DATABASE_URL_PUBLIC")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  role      RoleEnumType @default(USER)
  contactNo String
  address   String
  location  String
  createAt  DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  bookings  Booking[]

  @@map("users")
}

model Turf {
  id         String      @id @default(uuid())
  name       String
  location   String
  owner      String
  imgurl     String
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameOffers GameOffer[]
  fields     Field[]
  bookings   Booking[]

  @@map("turfs")
}

model GameType {
  id              String      @id @default(uuid())
  name            String
  imgurl          String
  numberOfPalyers Int
  GameOffers      GameOffer[]
  createAt        DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bookings        Booking[]

  @@map("game-types")
}

model Field {
  id         String      @id @default(uuid())
  code       String
  size       String
  turfId     String
  turf       Turf        @relation(fields: [turfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameOffers GameOffer[]
  bookings   Booking[]

  @@map("fields")
}

model GameOffer {
  id             String    @id @default(uuid())
  price_per_hour Float
  turfId         String
  turf           Turf      @relation(fields: [turfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameTypeId     String
  gameType       GameType  @relation(fields: [gameTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fieldId        String
  field          Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt       DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]

  @@map("game-offers")
}

model Booking {
  id             String         @id @default(uuid())
  start_time     String
  end_time       String
  gameOfferId    String
  gameOffer      GameOffer      @relation(fields: [gameOfferId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  turfId         String
  turf           Turf           @relation(fields: [turfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fieldId        String
  field          Field          @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameTypeId     String
  gameType       GameType       @relation(fields: [gameTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt       DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  payment_status StatusEnumType @default(PENDING)
  payments       Payment[]

  @@map("bookings")
}

model Payment {
  id        String   @id @default(uuid())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}

enum RoleEnumType {
  ADMIN
  USER
  SUPER_ADMIN
}

enum StatusEnumType {
  PENDING
  EXECUTED
}
